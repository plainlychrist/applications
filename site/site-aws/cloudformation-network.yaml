---
  # vim: autoindent smarttab tabstop=2 shiftwidth=2 expandtab softtabstop=2 filetype=yaml
  # vim: set syntax=yaml:
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "AWS CloudFormation template to create a network for plainlychrist.org"
  Mappings:
    VpcCidrs:
      eu-central-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      sa-east-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      ap-northeast-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      eu-west-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      us-east-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      us-west-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      us-west-2:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      ap-southeast-2:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
      ap-southeast-1:
        vpc: "10.0.0.0/16"
        pubsubnet1: "10.0.0.0/24"
        pubsubnet2: "10.0.1.0/24"
        prvsubnet1: "10.0.2.0/24"
        prvsubnet2: "10.0.3.0/24"
  Parameters:
    ModificationTimestamp:
      Description: "The modification date of the stack, in ISO-8601 format"
      Type: "String"
      MinLength: 21
      MaxLength: 21
      AllowedPattern: "[0-9]{8}T[0-9]{12}"
      ConstraintDescription: "must be ISO 8601 format, like 20170128T072603428619"
    ElbSSLCertificateCommonName:
      Default: ""
      Description: "The common name of the SSL certificate, like mywebsite.org. If not specified, the self-signed certificates of each ECS container are used"
      Type: "String"
      MinLength: "0"
      MaxLength: "256"
      AllowedPattern: "[a-zA-Z0-9.]*"
      ConstraintDescription: "must be a Common Name"
    ElbSSLCertificateId:
      Default: "arn:"
      Description: "An ARN to a SSL certificate. See http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html. If not specified, the self-signed SSL certificates of each ECS container are used, and a TCP loadbalancer is used for HTTPS so that the SSL terminates on the ECS containers"
      Type: "String"
      MinLength: "1"
      MaxLength: "256"
      AllowedPattern: "arn:[a-zA-Z0-9:_./-]*"
      ConstraintDescription: "must be an Amazon Resource Name"
    VpcId:
      Type: "String"
      Description: "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created"
      Default: ""
      AllowedPattern: "^(?:vpc-[0-9a-f]{8}|)$"
      ConstraintDescription: "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created"
    ECSSubnetIds:
      Type: "CommaDelimitedList"
      Description: "Optional - Comma separated list of existing VPC Subnet Ids where ECS instances will run; usually a public subnet if it already exists"
      Default: ""
    DBSubnetIds:
      Type: "CommaDelimitedList"
      Description: "Optional - Comma separated list of existing VPC Subnet Ids where database instances will run; usually a private subnet if it already exists"
      Default: ""
    EcsHttpPort:
      Type: "String"
      Description: "Optional - Security Group HTTP port to open on ECS instances - defaults to port 80"
      Default: "80"
    EcsHttpsPort:
      Type: "String"
      Description: "Optional - Security Group HTTPS port to open on ECS instances - defaults to port 443"
      Default: "443"
    ElbHttpPort:
      Type: "String"
      Description: "Optional - Security Group HTTP port to open on ELB - port 80 will be open by default"
      Default: "80"
    ElbHttpsPort:
      Type: "String"
      Description: "Optional - Security Group HTTPS port to open on ELB - port 443 will be open by default"
      Default: "443"
    SourceCidr:
      Type: "String"
      Description: "Optional - CIDR/IP range for EcsHttpPort and EcsHttpsPort and ElbHttpPort and ElbHttpsPort - defaults to 0.0.0.0/0"
      Default: "0.0.0.0/0"
    CreateElasticLoadBalancer:
      Type: "String"
      Description: "Optional : When set to true, creates a ELB for ECS Service"
      Default: "false"
    VpcAvailabilityZones:
      Type: "CommaDelimitedList"
      Description: "Optional : Comma-delimited list of two VPC availability zones in which to create subnets"
      Default: "us-west-2c,us-west-2a,us-west-2b"
  Conditions:
    TerminateSSLOnHosts:
      Fn::Equals:
        - Ref: "ElbSSLCertificateCommonName"
        - ""
    CreateVpcResources:
      Fn::Equals:
        -
          Ref: "VpcId"
        - ""
    ExistingVpcResources:
      Fn::Not:
        -
          Fn::Equals:
            -
              Ref: "VpcId"
            - ""
    CreateELBForExistingVpc:
      Fn::And:
        -
          Fn::Equals:
            -
              Ref: "CreateElasticLoadBalancer"
            - "true"
        -
          Condition: "ExistingVpcResources"
    CreateELBForNewVpc:
      Fn::And:
        -
          Fn::Equals:
            -
              Ref: "CreateElasticLoadBalancer"
            - "true"
        -
          Condition: "CreateVpcResources"
    CreateELB:
      Fn::Or:
        -
          Condition: "CreateELBForExistingVpc"
        -
          Condition: "CreateELBForNewVpc"
    UseSpecifiedVpcAvailabilityZones:
      Fn::Not:
        -
          Fn::Equals:
            -
              Fn::Join:
                - ""
                -
                  Ref: "VpcAvailabilityZones"
            - ""
  Resources:
    Vpc:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock:
          Fn::FindInMap:
            - "VpcCidrs"
            -
              Ref: "AWS::Region"
            - "vpc"
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "30e0d2a4-e6b5-4ff0-a20b-272e5a4d1ad4"
    PubSubnetAz1:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Fn::FindInMap:
            - "VpcCidrs"
            -
              Ref: "AWS::Region"
            - "pubsubnet1"
        AvailabilityZone:
          Fn::If:
            - "UseSpecifiedVpcAvailabilityZones"
            -
              Fn::Select:
                - "0"
                -
                  Ref: "VpcAvailabilityZones"
            -
              Fn::Select:
                - "0"
                -
                  Fn::GetAZs:
                    Ref: "AWS::Region"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "61c05d7e-dc62-44a3-bb9b-76bee4756f8d"
    PubSubnetAz2:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Fn::FindInMap:
            - "VpcCidrs"
            -
              Ref: "AWS::Region"
            - "pubsubnet2"
        AvailabilityZone:
          Fn::If:
            - "UseSpecifiedVpcAvailabilityZones"
            -
              Fn::Select:
                - "1"
                -
                  Ref: "VpcAvailabilityZones"
            -
              Fn::Select:
                - "1"
                -
                  Fn::GetAZs:
                    Ref: "AWS::Region"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "5c8f746c-918a-4e68-8211-d54ddb77afe0"
    PrvSubnetAz1:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Fn::FindInMap:
            - "VpcCidrs"
            -
              Ref: "AWS::Region"
            - "prvsubnet1"
        AvailabilityZone:
          Fn::If:
            - "UseSpecifiedVpcAvailabilityZones"
            -
              Fn::Select:
                - "0"
                -
                  Ref: "VpcAvailabilityZones"
            -
              Fn::Select:
                - "0"
                -
                  Fn::GetAZs:
                    Ref: "AWS::Region"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "29908788-1e40-4f66-b67c-657f7156d025"
    PrvSubnetAz2:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Fn::FindInMap:
            - "VpcCidrs"
            -
              Ref: "AWS::Region"
            - "prvsubnet2"
        AvailabilityZone:
          Fn::If:
            - "UseSpecifiedVpcAvailabilityZones"
            -
              Fn::Select:
                - "1"
                -
                  Ref: "VpcAvailabilityZones"
            -
              Fn::Select:
                - "1"
                -
                  Fn::GetAZs:
                    Ref: "AWS::Region"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "6e4cf3fb-5662-4bbe-91c3-ef4049370a38"
    InternetGateway:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::InternetGateway"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "5accb84f-ecdb-465a-8dc0-d8437abb696a"
    AttachGateway:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "Vpc"
        InternetGatewayId:
          Ref: "InternetGateway"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "32aa66ee-d2a4-4a2d-b411-a8a7d55a515d"
    RouteViaIgw:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "Vpc"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "6c78ff1d-e74e-4d9c-b66d-e98c53722ea3"
    PublicRouteViaIgw:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::Route"
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId:
          Ref: "RouteViaIgw"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "370bf67b-9733-46cc-a261-4c7fc9ce63d2"
    PubSubnet1RouteTableAssociation:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PubSubnetAz1"
        RouteTableId:
          Ref: "RouteViaIgw"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "3ab86611-92ea-45d6-89db-d7e09964c37c"
    PubSubnet2RouteTableAssociation:
      Condition: "CreateVpcResources"
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PubSubnetAz2"
        RouteTableId:
          Ref: "RouteViaIgw"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "696ce439-4d7d-4ea5-b14d-3f0102a6aef4"
    ElbSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "ELB Allowed Ports"
        VpcId:
          Fn::If:
            - "CreateVpcResources"
            -
              Ref: "Vpc"
            -
              Ref: "VpcId"
        SecurityGroupIngress:
          -
            IpProtocol: "tcp"
            FromPort:
              Ref: "ElbHttpPort"
            ToPort:
              Ref: "ElbHttpPort"
            CidrIp:
              Ref: "SourceCidr"
          -
            IpProtocol: "tcp"
            FromPort:
              Ref: "ElbHttpsPort"
            ToPort:
              Ref: "ElbHttpsPort"
            CidrIp:
              Ref: "SourceCidr"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "3edbaa77-9fa7-4a89-b815-f74df94455ab"
    DrupalFilesMountTargetSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId:
          Fn::If:
            - "CreateVpcResources"
            -
              Ref: "Vpc"
            -
              Ref: "VpcId"
        GroupDescription: Security group for Drupal sites/default/files mount target
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049' # NFSv4 client port
          ToPort: '2049'
          SourceSecurityGroupId: # only ECS is allowed to access filesystem
            Ref: "EcsSecurityGroup"
    DrupalDbSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Open database for access"
        VpcId:
          Fn::If:
            - "CreateVpcResources"
            -
              Ref: "Vpc"
            -
              Ref: "VpcId"
        SecurityGroupIngress:
          -
            IpProtocol: "tcp"
            FromPort: "3306"
            ToPort: "3306"
            SourceSecurityGroupId:
              Ref: "EcsSecurityGroup"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "d777ebc2-1fa0-46d5-a67d-866c365c9270"
    EcsSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "ECS Allowed Ports"
        VpcId:
          Fn::If:
            - "CreateVpcResources"
            -
              Ref: "Vpc"
            -
              Ref: "VpcId"
        SecurityGroupIngress:
          Fn::If:
            - "CreateELB"
            -
              -
                IpProtocol: "tcp"
                FromPort:
                  Ref: "EcsHttpPort"
                ToPort:
                  Ref: "EcsHttpPort"
                CidrIp:
                  Ref: "SourceCidr"
              -
                IpProtocol: "tcp"
                FromPort:
                  Ref: "EcsHttpsPort"
                ToPort:
                  Ref: "EcsHttpsPort"
                CidrIp:
                  Ref: "SourceCidr"
              -
                IpProtocol: "tcp"
                FromPort: "22"
                ToPort: "22"
                CidrIp:
                  Ref: "SourceCidr"
              -
                IpProtocol: "tcp"
                FromPort: "1"
                ToPort: "65535"
                SourceSecurityGroupId:
                  Ref: "ElbSecurityGroup"
            -
              -
                IpProtocol: "tcp"
                FromPort:
                  Ref: "EcsHttpPort"
                ToPort:
                  Ref: "EcsHttpPort"
                CidrIp:
                  Ref: "SourceCidr"
              -
                IpProtocol: "tcp"
                FromPort:
                  Ref: "EcsHttpsPort"
                ToPort:
                  Ref: "EcsHttpsPort"
                CidrIp:
                  Ref: "SourceCidr"
              -
                IpProtocol: "tcp"
                FromPort: "22"
                ToPort: "22"
                CidrIp:
                  Ref: "SourceCidr"
      Metadata:
        AWS::CloudFormation::Designer:
          id: "11e9b77e-12a2-47c3-b18e-34cf6fb81e75"
    EcsElasticLoadBalancer:
      Condition: "CreateELBForNewVpc"
      Type: "AWS::ElasticLoadBalancing::LoadBalancer"
      Properties:
        SecurityGroups:
          -
            Ref: "ElbSecurityGroup"
        Subnets:
          -
            Ref: "PubSubnetAz1"
          -
            Ref: "PubSubnetAz2"
        CrossZone: "true"
        Listeners:
          -
            LoadBalancerPort:
              Ref: "ElbHttpPort"
            InstancePort:
              Ref: "EcsHttpPort"
            Protocol: "HTTP"
          -
            Fn::If:
              - "TerminateSSLOnHosts"
              -
                LoadBalancerPort:
                  Ref: "ElbHttpsPort"
                InstancePort:
                  Ref: "EcsHttpsPort"
                InstanceProtocol: "TCP"
                Protocol: "TCP"
              -
                LoadBalancerPort:
                  Ref: "ElbHttpsPort"
                InstancePort:
                  Ref: "EcsHttpsPort"
                InstanceProtocol: "HTTPS"
                PolicyNames:
                  - MyAppCookieStickinessPolicy
                Protocol: "HTTPS"
                SSLCertificateId: !Ref "ElbSSLCertificateId"
        HealthCheck:
          Target:
            Fn::If:
              - "TerminateSSLOnHosts"
              - "TCP:443"
              - "HTTPS:443/"
          HealthyThreshold: "5"
          UnhealthyThreshold: "2"
          Interval: "30"
          Timeout: "5"
        Policies:
          - PolicyName: MyAppCookieStickinessPolicy
            PolicyType: AppCookieStickinessPolicyType
            Attributes:
              - Name: CookieName
                Value: lbloc # set in Drupal custom loadbalancing_cookie.module
      Metadata:
        AWS::CloudFormation::Designer:
          id: "5a14b8d6-e3be-4699-86db-3aa7ecc0e27d"
    EcsElasticLoadBalancerExistingVpc:
      Condition: "CreateELBForExistingVpc"
      Type: "AWS::ElasticLoadBalancing::LoadBalancer"
      Properties:
        SecurityGroups:
          -
            Ref: "ElbSecurityGroup"
        Subnets:
          Ref: "ECSSubnetIds"
        CrossZone: "true"
        Listeners:
          -
            LoadBalancerPort:
              Ref: "ElbHttpPort"
            InstancePort:
              Ref: "EcsHttpPort"
            Protocol: "HTTP"
          -
            Fn::If:
              - "TerminateSSLOnHosts"
              -
                LoadBalancerPort:
                  Ref: "ElbHttpsPort"
                InstancePort:
                  Ref: "EcsHttpsPort"
                InstanceProtocol: "TCP"
                Protocol: "TCP"
              -
                LoadBalancerPort:
                  Ref: "ElbHttpsPort"
                InstancePort:
                  Ref: "EcsHttpsPort"
                InstanceProtocol: "HTTPS"
                PolicyNames:
                  - MyAppCookieStickinessPolicy
                Protocol: "HTTPS"
                SSLCertificateId: !Ref "ElbSSLCertificateId"
        HealthCheck:
          Target:
            Fn::If:
              - "TerminateSSLOnHosts"
              - "TCP:443"
              - "HTTPS:443/"
          HealthyThreshold: "2"
          UnhealthyThreshold: "10"
          Interval: "30"
          Timeout: "5"
        Policies:
          - PolicyName: MyAppCookieStickinessPolicy
            PolicyType: AppCookieStickinessPolicyType
            Attributes:
              - Name: CookieName
                Value: Drupal.visitor.lbloc # set in Drupal custom loadbalancing_cookie.module
      Metadata:
        AWS::CloudFormation::Designer:
          id: "489c5cf7-1c12-46b0-a4a2-99756235aa52"
  Outputs:
    # These outputs are for ease of use in the AWS Console. They are not exported.

    ElbSSLCertificateCommonName:
      Description: "The common name (public, fully qualified domain name) of the SSL certificate for the load balancer, or empty if none"
      Value: !Ref ElbSSLCertificateCommonName

    # The below outputs are all exported because they are needed by higher-layered stacks (database, compute)

    EcsSecurityGroup:
      Description: "The security group for the Elastic Container Service"
      Value: !GetAtt EcsSecurityGroup.GroupId
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-EcsSecurityGroup" ]]
    DrupalDbSecurityGroup:
      Description: "The security group for the Drupal database"
      Value: !GetAtt DrupalDbSecurityGroup.GroupId
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-DrupalDbSecurityGroup" ]]
    DrupalFilesMountTargetSecurityGroup:
      Description: "The security group for the Drupal NFS shared filesystem"
      Value: !GetAtt DrupalFilesMountTargetSecurityGroup.GroupId
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-DrupalFilesMountTargetSecurityGroup" ]]
    PubSubnetAz1:
      Description: "The public subnet in availability zone #1"
      Value: !Ref PubSubnetAz1
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-PubSubnetAz1" ]]
    PubSubnetAz2:
      Description: "The public subnet in availability zone #2"
      Value: !Ref PubSubnetAz2
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-PubSubnetAz2" ]]
    PrvSubnetAz1:
      Description: "The private subnet in availability zone #1"
      Value: !Ref PrvSubnetAz1
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-PrvSubnetAz1" ]]
    PrvSubnetAz2:
      Description: "The private subnet in availability zone #2"
      Value: !Ref PrvSubnetAz2
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-PrvSubnetAz2" ]]
    ElbDnsName:
      Description: "DNS Name for elastic load balancer"
      Value:
        Fn::If:
          - "CreateELBForNewVpc"
          - !GetAtt EcsElasticLoadBalancer.DNSName
          - !GetAtt EcsElasticLoadBalancerExistingVpc.DNSName
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-ElbDnsName" ]]
    EcsElbId:
      Description: "Load Balancer logical id for ECS Service"
      Value:
        Fn::If:
          - "CreateELB"
          -
            Fn::If:
              - "CreateELBForNewVpc"
              -
                Ref: "EcsElasticLoadBalancer"
              -
                Ref: "EcsElasticLoadBalancerExistingVpc"
          - ""
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-EcsElbId" ]]
    TrustHostPatternArg1:
      Description: "The first argument of either '--trust-host-pattern ^ELASTIC_LOAD_BALANCER_NAME$' or '--no-op --no-op'"
      Value:
        Fn::If:
          - "TerminateSSLOnHosts"
          - "--no-op"
          - "--trust-host-pattern"
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-TrustHostPatternArg1" ]]
    TrustHostPatternArg2:
      Description: "The second argument of either '--trust-host-pattern ^ELASTIC_LOAD_BALANCER_NAME$' or '--no-op --no-op'"
      Value:
        Fn::If:
          - "TerminateSSLOnHosts"
          - "--no-op"
          -
            Fn::Join:
              - ""
              -
                - "^"
                - !Ref ElbSSLCertificateCommonName
                - "$"
      Export:
        Name: !Join ["", [ !Ref "AWS::StackName", "-TrustHostPatternArg2" ]]
